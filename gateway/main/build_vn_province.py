# Tạo LUT: mỗi ô lưới gán 1 province_id. Xuất .h để nhúng vào ESP32.
import json, math, sys
from shapely.geometry import shape, Point

LAT_MIN, LAT_MAX = 8.0, 23.5
LON_MIN, LON_MAX = 102.0, 110.0
STEP = 0.05  

# ---- Input/Output ----
GEOJSON = "gadm41_VNM_1.json"  
OUT_H    = "province_lut.h"

def main():
    with open(GEOJSON, "r", encoding="utf-8") as f:
        gj = json.load(f)

    # Đọc polygon các tỉnh
    features = []
    for i, feat in enumerate(gj["features"]):
        geom = shape(feat["geometry"])
        props = feat.get("properties", {})
        # Thử nhiều key tên tỉnh – tùy nguồn dữ liệu
        name = props.get("VARNAME_1")
        features.append((geom, name))


    name_to_id = {name: idx+1 for idx, (_, name) in enumerate(features)} 
    id_to_name = {v:k for k,v in name_to_id.items()}

    H = int(round((LAT_MAX - LAT_MIN) / STEP)) + 1
    W = int(round((LON_MAX - LON_MIN) / STEP)) + 1
    print(H, W)

    lut = [[0]*W for _ in range(H)]

    for i in range(H):
        lat = LAT_MIN + i*STEP
        if i % 20 == 0:
            print(f"row {i+1}/{H} lat={lat:.3f}")
        for j in range(W):
            lon = LON_MIN + j*STEP
            p = Point(lon, lat)
            assigned = 0
            for geom, name in features:
                if geom.contains(p):
                    assigned = name_to_id[name]
                    break
            lut[i][j] = assigned


    with open(OUT_H, "w", encoding="utf-8") as out:
        out.write("// Auto-generated by build_vn_province_lut.py\n")
        out.write("#pragma once\n#include <stdint.h>\n\n")
        out.write(f"#define PROV_LAT_MIN {LAT_MIN}f\n")
        out.write(f"#define PROV_LON_MIN {LON_MIN}f\n")
        out.write(f"#define PROV_STEP {STEP}f\n")
        out.write(f"#define PROV_H {H}\n#define PROV_W {W}\n\n")

        # Tên tỉnh
        out.write("static const char* PROV_NAMES[] = {\n    \"UNKNOWN\"")
        max_id = max((x for row in lut for x in row), default=0)
        # đảm bảo đủ số lượng tỉnh
        for pid in range(1, max_id+1):
            out.write(f",\n    \"{id_to_name[pid]}\"")
        out.write("\n};\n\n")

        # LUT
        out.write(f"static const uint8_t PROV_LUT[PROV_H][PROV_W] = {{\n")
        for i in range(H):
            row = ",".join(str(x) for x in lut[i])
            out.write(f"  {{{row}}}")
            out.write(",\n" if i < H-1 else "\n")
        out.write("};\n")
    print(f"Wrote {OUT_H} (H={H}, W={W})")

if __name__ == '__main__':
    main()
